{"version":3,"sources":["../src/index.ts","../src/deep-strict-equal/index.ts"],"sourcesContent":["export { default as deepStrictEqual } from './deep-strict-equal'\n","/**\n * Check if element is a primitive type\n * @date 04/10/2022 - 21:10:18\n *\n * @param {unknown} element Element to check\n * @returns {boolean}\n */\nconst isPrimitive = (element: unknown) => !(Object(element) === element)\n\n/**\n * Return type of element\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} element Element to check type\n * @returns {String} Type of element\n */\nconst typeOfElement = (element: any) => {\n  const typeString = Reflect.apply(Object.prototype.toString, element, [])\n  return typeString\n    .slice(typeString.indexOf(' ') + 1, typeString.indexOf(']'))\n    .toUpperCase()\n}\n\n/**\n * Return own properties from element\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} element\n * @returns {Array} properties from element includes Symbols\n */\nconst getOwnKeys = (element: any) => Reflect.ownKeys(element)\n\n/**\n * Check if both elements has different properties length\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} elementA\n * @param {*} elementB\n * @returns {boolean}\n */\nconst arePropertiesLengthDifferent = (elementA: any, elementB: any): boolean =>\n  getOwnKeys(elementA).length !== getOwnKeys(elementB).length\n\n/**\n * Check if both elements are primitive types\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} elementA\n * @param {*} elementB\n * @returns {boolean}\n */\nconst areElementsPrimitives = (elementA: any, elementB: any): boolean =>\n  isPrimitive(elementA) && isPrimitive(elementB)\n\n/**\n * Check if both elements are different types\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} elementA\n * @param {*} elementB\n * @returns {boolean}\n */\nconst areDifferentTypes = (elementA: unknown, elementB: unknown): boolean =>\n  typeOfElement(elementA) !== typeOfElement(elementB)\n\n/**\n * Check if both elements are equals\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} elementA\n * @param {*} elementB\n * @returns {Boolean} true: is equal, false: not equal\n */\nconst compareElements = (elementA: object, elementB: object): boolean =>\n  getOwnKeys(elementA).every((elementAKey) =>\n    Reflect.has(elementB, elementAKey)\n      ? deepStrictEqual(elementB[elementAKey], elementA[elementAKey])\n      : false,\n  )\n\n/**\n * Convert a data structure to Object\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} element\n * @returns {*}\n */\nconst convertStructureToObject = (element: any) => {\n  if (\n    typeOfElement(element) === 'OBJECT' ||\n    typeOfElement(element) === 'ARRAY'\n  ) {\n    return element\n  }\n\n  return structureStrategy(element)[typeOfElement(element)] ?? element\n}\n\ntype StructureType = Map<unknown, unknown> | Set<unknown>\n\n/**\n * Return convert object strategy\n * @date 05/10/2022 - 10:13:30\n *\n * @param {*} structure\n * @returns {{ MAP: any; SET: any; DEFAULT: any; }} Strategy\n */\nconst structureStrategy = (structure: StructureType) => ({\n  MAP: Array.from(structure),\n  SET: Array.from(structure, (key) => [key, key]),\n})\n\n/**\n * Check if both data structures are equals\n * @date 04/10/2022 - 21:10:18\n *\n * @param {*} objA\n * @param {*} objB\n * @returns {boolean} true = equal, false = not equal\n */\nconst deepStrictEqual = (objA: unknown, objB: unknown): boolean => {\n  if (areElementsPrimitives(objA, objB)) {\n    return Object.is(objA, objB)\n  }\n\n  if (areDifferentTypes(objA, objB)) {\n    return false\n  }\n\n  const tmp_elementA = convertStructureToObject(objA)\n  const tmp_elementB = convertStructureToObject(objB)\n\n  if (arePropertiesLengthDifferent(tmp_elementA, tmp_elementB)) {\n    return false\n  }\n\n  return compareElements(tmp_elementA, tmp_elementB)\n}\n\nexport default deepStrictEqual\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,qBAAAE,IAAA,eAAAC,EAAAH,GCOA,IAAMI,EAAeC,GAAuB,OAAOA,CAAO,IAAMA,EAS1DC,EAAiBD,GAAiB,CACtC,IAAME,EAAa,QAAQ,MAAM,OAAO,UAAU,SAAUF,EAAS,CAAC,CAAC,EACvE,OAAOE,EACJ,MAAMA,EAAW,QAAQ,GAAG,EAAI,EAAGA,EAAW,QAAQ,GAAG,CAAC,EAC1D,YAAY,CACjB,EASMC,EAAcH,GAAiB,QAAQ,QAAQA,CAAO,EAUtDI,EAA+B,CAACC,EAAeC,IACnDH,EAAWE,CAAQ,EAAE,SAAWF,EAAWG,CAAQ,EAAE,OAUjDC,EAAwB,CAACF,EAAeC,IAC5CP,EAAYM,CAAQ,GAAKN,EAAYO,CAAQ,EAUzCE,EAAoB,CAACH,EAAmBC,IAC5CL,EAAcI,CAAQ,IAAMJ,EAAcK,CAAQ,EAU9CG,EAAkB,CAACJ,EAAkBC,IACzCH,EAAWE,CAAQ,EAAE,MAAOK,GAC1B,QAAQ,IAAIJ,EAAUI,CAAW,EAC7BC,EAAgBL,EAASI,GAAcL,EAASK,EAAY,EAC5D,EACN,EASIE,EAA4BZ,GAE9BC,EAAcD,CAAO,IAAM,UAC3BC,EAAcD,CAAO,IAAM,QAEpBA,EAGFa,EAAkBb,CAAO,EAAEC,EAAcD,CAAO,IAAMA,EAYzDa,EAAqBC,IAA8B,CACvD,IAAK,MAAM,KAAKA,CAAS,EACzB,IAAK,MAAM,KAAKA,EAAYC,GAAQ,CAACA,EAAKA,CAAG,CAAC,CAChD,GAUMJ,EAAkB,CAACK,EAAeC,IAA2B,CACjE,GAAIV,EAAsBS,EAAMC,CAAI,EAClC,OAAO,OAAO,GAAGD,EAAMC,CAAI,EAG7B,GAAIT,EAAkBQ,EAAMC,CAAI,EAC9B,MAAO,GAGT,IAAMC,EAAeN,EAAyBI,CAAI,EAC5CG,EAAeP,EAAyBK,CAAI,EAElD,OAAIb,EAA6Bc,EAAcC,CAAY,EAClD,GAGFV,EAAgBS,EAAcC,CAAY,CACnD,EAEOC,EAAQT","names":["src_exports","__export","deep_strict_equal_default","__toCommonJS","isPrimitive","element","typeOfElement","typeString","getOwnKeys","arePropertiesLengthDifferent","elementA","elementB","areElementsPrimitives","areDifferentTypes","compareElements","elementAKey","deepStrictEqual","convertStructureToObject","structureStrategy","structure","key","objA","objB","tmp_elementA","tmp_elementB","deep_strict_equal_default"]}