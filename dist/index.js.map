{"version":3,"sources":["../src/index.ts","../src/deep-strict-equal/index.ts"],"sourcesContent":["export { default as deepStrictEqual } from './deep-strict-equal'\n","/**\r\n * Check if element is a primitive type\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {unknown} element Element to check\r\n * @returns {boolean}\r\n */\r\nconst isPrimitive = (element: unknown) => !(Object(element) === element)\r\n\r\n/**\r\n * Return type of element\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} element Element to check type\r\n * @returns {String} Type of element\r\n */\r\nconst typeOfElement = (element: any) => {\r\n  const typeString = Reflect.apply(Object.prototype.toString, element, [])\r\n  return typeString\r\n    .slice(typeString.indexOf(' ') + 1, typeString.indexOf(']'))\r\n    .toUpperCase()\r\n}\r\n\r\n/**\r\n * Return own properties from element\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} element\r\n * @returns {Array} properties from element includes Symbols\r\n */\r\nconst getOwnKeys = (element: any) => Reflect.ownKeys(element)\r\n\r\n/**\r\n * Check if both elements has different properties length\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} elementA\r\n * @param {*} elementB\r\n * @returns {boolean}\r\n */\r\nconst arePropertiesLengthDifferent = (elementA: any, elementB: any): boolean =>\r\n  getOwnKeys(elementA).length !== getOwnKeys(elementB).length\r\n\r\n/**\r\n * Check if both elements are primitive types\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} elementA\r\n * @param {*} elementB\r\n * @returns {boolean}\r\n */\r\nconst areElementsPrimitives = (elementA: any, elementB: any): boolean =>\r\n  isPrimitive(elementA) && isPrimitive(elementB)\r\n\r\n/**\r\n * Check if both elements are different types\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} elementA\r\n * @param {*} elementB\r\n * @returns {boolean}\r\n */\r\nconst areDifferentTypes = (elementA: any, elementB: any): boolean =>\r\n  typeOfElement(elementA) !== typeOfElement(elementB)\r\n\r\n/**\r\n * Check if both elements are equals\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} elementA\r\n * @param {*} elementB\r\n * @returns {Boolean} true: is equal, false: not equal\r\n */\r\nconst compareElements = (elementA: any, elementB: any): boolean =>\r\n  getOwnKeys(elementA).every((elementAKey) =>\r\n    Reflect.has(elementB, elementAKey)\r\n      ? deepStrictEqual(elementB[elementAKey], elementA[elementAKey])\r\n      : false,\r\n  )\r\n\r\n/**\r\n * Convert a data structure to Object\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} element\r\n * @returns {*}\r\n */\r\nconst convertStructureToObject = (element: any) => {\r\n  if (\r\n    typeOfElement(element) === 'OBJECT' ||\r\n    typeOfElement(element) === 'ARRAY'\r\n  ) {\r\n    return element\r\n  }\r\n\r\n  return structureStrategy(element)[typeOfElement(element)] ?? element\r\n}\r\n\r\n/**\r\n * Return convert object strategy\r\n * @date 05/10/2022 - 10:13:30\r\n *\r\n * @param {*} structure\r\n * @returns {{ MAP: any; SET: any; DEFAULT: any; }} Strategy\r\n */\r\nconst structureStrategy = (structure: any) => ({\r\n  MAP: Array.from(structure),\r\n  SET: Array.from(structure, (key) => [key, key]),\r\n  DEFAULT: structure,\r\n})\r\n\r\n/**\r\n * Check if both data structures are equals\r\n * @date 04/10/2022 - 21:10:18\r\n *\r\n * @param {*} objA\r\n * @param {*} objB\r\n * @returns {boolean} true = equal, false = not equal\r\n */\r\nconst deepStrictEqual = (objA: any, objB: any): boolean => {\r\n  if (areElementsPrimitives(objA, objB)) {\r\n    return Object.is(objA, objB)\r\n  }\r\n\r\n  if (areDifferentTypes(objA, objB)) {\r\n    return false\r\n  }\r\n\r\n  const tmp_elementA = convertStructureToObject(objA)\r\n  const tmp_elementB = convertStructureToObject(objB)\r\n\r\n  if (arePropertiesLengthDifferent(tmp_elementA, tmp_elementB)) {\r\n    return false\r\n  }\r\n\r\n  return compareElements(tmp_elementA, tmp_elementB)\r\n}\r\n\r\nexport default deepStrictEqual\r\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,qBAAAE,IAAA,eAAAC,EAAAH,GCOA,IAAMI,EAAeC,GAAuB,OAAOA,CAAO,IAAMA,EAS1DC,EAAiBD,GAAiB,CACtC,IAAME,EAAa,QAAQ,MAAM,OAAO,UAAU,SAAUF,EAAS,CAAC,CAAC,EACvE,OAAOE,EACJ,MAAMA,EAAW,QAAQ,GAAG,EAAI,EAAGA,EAAW,QAAQ,GAAG,CAAC,EAC1D,YAAY,CACjB,EASMC,EAAcH,GAAiB,QAAQ,QAAQA,CAAO,EAUtDI,EAA+B,CAACC,EAAeC,IACnDH,EAAWE,CAAQ,EAAE,SAAWF,EAAWG,CAAQ,EAAE,OAUjDC,EAAwB,CAACF,EAAeC,IAC5CP,EAAYM,CAAQ,GAAKN,EAAYO,CAAQ,EAUzCE,EAAoB,CAACH,EAAeC,IACxCL,EAAcI,CAAQ,IAAMJ,EAAcK,CAAQ,EAU9CG,EAAkB,CAACJ,EAAeC,IACtCH,EAAWE,CAAQ,EAAE,MAAOK,GAC1B,QAAQ,IAAIJ,EAAUI,CAAW,EAC7BC,EAAgBL,EAASI,GAAcL,EAASK,EAAY,EAC5D,EACN,EASIE,EAA4BZ,GAE9BC,EAAcD,CAAO,IAAM,UAC3BC,EAAcD,CAAO,IAAM,QAEpBA,EAGFa,EAAkBb,CAAO,EAAEC,EAAcD,CAAO,IAAMA,EAUzDa,EAAqBC,IAAoB,CAC7C,IAAK,MAAM,KAAKA,CAAS,EACzB,IAAK,MAAM,KAAKA,EAAYC,GAAQ,CAACA,EAAKA,CAAG,CAAC,EAC9C,QAASD,CACX,GAUMH,EAAkB,CAACK,EAAWC,IAAuB,CACzD,GAAIV,EAAsBS,EAAMC,CAAI,EAClC,OAAO,OAAO,GAAGD,EAAMC,CAAI,EAG7B,GAAIT,EAAkBQ,EAAMC,CAAI,EAC9B,MAAO,GAGT,IAAMC,EAAeN,EAAyBI,CAAI,EAC5CG,EAAeP,EAAyBK,CAAI,EAElD,OAAIb,EAA6Bc,EAAcC,CAAY,EAClD,GAGFV,EAAgBS,EAAcC,CAAY,CACnD,EAEOC,EAAQT","names":["src_exports","__export","deep_strict_equal_default","__toCommonJS","isPrimitive","element","typeOfElement","typeString","getOwnKeys","arePropertiesLengthDifferent","elementA","elementB","areElementsPrimitives","areDifferentTypes","compareElements","elementAKey","deepStrictEqual","convertStructureToObject","structureStrategy","structure","key","objA","objB","tmp_elementA","tmp_elementB","deep_strict_equal_default"]}